<tokens>
<identifier> /** </identifier>
<symbol> * </symbol>
<identifier> Implements </identifier>
<identifier> a </identifier>
<identifier> graphic </identifier>
<identifier> square. </identifier>
<identifier> A </identifier>
<identifier> graphic </identifier>
<identifier> square </identifier>
<identifier> has </identifier>
<identifier> a </identifier>
<identifier> screen </identifier>
<identifier> location </identifier>
<symbol> * </symbol>
<identifier> and </identifier>
<identifier> a </identifier>
<identifier> size. </identifier>
<identifier> It </identifier>
<identifier> also </identifier>
<identifier> has </identifier>
<identifier> methods </identifier>
<identifier> for </identifier>
<identifier> drawing, </identifier>
<identifier> erasing, </identifier>
<identifier> moving </identifier>
<identifier> on </identifier>
<identifier> the </identifier>
<symbol> * </symbol>
<identifier> screen, </identifier>
<identifier> and </identifier>
<identifier> changing </identifier>
<identifier> its </identifier>
<identifier> size. </identifier>
<identifier> */ </identifier>
<keyword> class </keyword>
<identifier> Square </identifier>
<symbol> { </symbol>
<identifier> field </identifier>
<keyword> int </keyword>
<identifier> x, </identifier>
<identifier> y; </identifier>
<identifier> field </identifier>
<keyword> int </keyword>
<identifier> size; </identifier>
<identifier> /** </identifier>
<identifier> Constructs </identifier>
<identifier> a </identifier>
<identifier> new </identifier>
<identifier> square </identifier>
<identifier> with </identifier>
<identifier> a </identifier>
<identifier> given </identifier>
<identifier> location </identifier>
<identifier> and </identifier>
<identifier> size. </identifier>
<identifier> */ </identifier>
<keyword> constructor </keyword>
<identifier> Square </identifier>
<identifier> new(int </identifier>
<identifier> Ax, </identifier>
<keyword> int </keyword>
<identifier> Ay, </identifier>
<keyword> int </keyword>
<identifier> Asize) </identifier>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax; </identifier>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay; </identifier>
<keyword> let </keyword>
<identifier> size </identifier>
<symbol> = </symbol>
<identifier> Asize; </identifier>
<keyword> do </keyword>
<identifier> draw(); </identifier>
<keyword> return </keyword>
<identifier> this; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Deallocates </identifier>
<identifier> the </identifier>
<identifier> object's </identifier>
<identifier> memory. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose() </identifier>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory.deAlloc(this); </identifier>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Draws </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> on </identifier>
<identifier> the </identifier>
<identifier> screen. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw() </identifier>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(true); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Erases </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> from </identifier>
<identifier> the </identifier>
<identifier> screen. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> erase() </identifier>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(false); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Increments </identifier>
<identifier> the </identifier>
<identifier> size </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> incSize() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> (((y </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> < </symbol>
<symbol> & </symbol>
<identifier> ((x </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> < </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> erase(); </identifier>
<keyword> let </keyword>
<identifier> size </identifier>
<symbol> = </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<keyword> do </keyword>
<identifier> draw(); </identifier>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Decrements </identifier>
<identifier> the </identifier>
<identifier> size </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> decSize() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> (size </identifier>
<symbol> > </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> erase(); </identifier>
<keyword> let </keyword>
<identifier> size </identifier>
<symbol> = </symbol>
<identifier> size </identifier>
<symbol> - </symbol>
<keyword> do </keyword>
<identifier> draw(); </identifier>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Moves </identifier>
<identifier> up </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveUp() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> (y </identifier>
<symbol> > </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(false); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> (y </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> - </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> - </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(true); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Moves </identifier>
<identifier> down </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveDown() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> ((y </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> < </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(false); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(true); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> (y </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> - </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Moves </identifier>
<identifier> left </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveLeft() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> (x </identifier>
<symbol> > </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(false); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle((x </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> - </symbol>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(true); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Moves </identifier>
<identifier> right </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveRight() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> ((x </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> < </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(false); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle(x, </identifier>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<keyword> do </keyword>
<identifier> Screen.setColor(true); </identifier>
<keyword> do </keyword>
<identifier> Screen.drawRectangle((x </identifier>
<symbol> + </symbol>
<identifier> size) </identifier>
<symbol> - </symbol>
<identifier> y, </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size, </identifier>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size); </identifier>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<symbol> } </symbol>
