<tokens>
<identifier> /** </identifier>
<symbol> * </symbol>
<identifier> Implements </identifier>
<identifier> the </identifier>
<identifier> Square </identifier>
<identifier> Dance </identifier>
<identifier> game. </identifier>
<symbol> * </symbol>
<identifier> In </identifier>
<keyword> this </keyword>
<identifier> game </identifier>
<identifier> you </identifier>
<identifier> can </identifier>
<identifier> move </identifier>
<identifier> a </identifier>
<identifier> black </identifier>
<identifier> square </identifier>
<identifier> around </identifier>
<identifier> the </identifier>
<identifier> screen </identifier>
<identifier> and </identifier>
<symbol> * </symbol>
<identifier> change </identifier>
<identifier> its </identifier>
<identifier> size </identifier>
<identifier> during </identifier>
<identifier> the </identifier>
<identifier> movement. </identifier>
<symbol> * </symbol>
<identifier> In </identifier>
<identifier> the </identifier>
<identifier> beginning, </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> is </identifier>
<identifier> located </identifier>
<identifier> at </identifier>
<identifier> the </identifier>
<identifier> top-left </identifier>
<identifier> corner </identifier>
<symbol> * </symbol>
<identifier> of </identifier>
<identifier> the </identifier>
<identifier> screen. </identifier>
<identifier> The </identifier>
<identifier> arrow </identifier>
<identifier> keys </identifier>
<identifier> are </identifier>
<identifier> used </identifier>
<identifier> to </identifier>
<identifier> move </identifier>
<identifier> the </identifier>
<identifier> square. </identifier>
<symbol> * </symbol>
<identifier> The </identifier>
<identifier> 'z' </identifier>
<symbol> & </symbol>
<identifier> 'x' </identifier>
<identifier> keys </identifier>
<identifier> are </identifier>
<identifier> used </identifier>
<identifier> to </identifier>
<identifier> decrement </identifier>
<identifier> and </identifier>
<identifier> increment </identifier>
<identifier> the </identifier>
<identifier> size. </identifier>
<symbol> * </symbol>
<identifier> The </identifier>
<identifier> 'q' </identifier>
<identifier> key </identifier>
<identifier> is </identifier>
<identifier> used </identifier>
<identifier> to </identifier>
<identifier> quit </identifier>
<identifier> the </identifier>
<identifier> game. </identifier>
<identifier> */ </identifier>
<keyword> class </keyword>
<identifier> SquareGame </identifier>
<symbol> { </symbol>
<identifier> field </identifier>
<identifier> Square </identifier>
<identifier> square; </identifier>
<identifier> field </identifier>
<keyword> int </keyword>
<identifier> direction; </identifier>
<identifier> /** </identifier>
<identifier> Constructs </identifier>
<identifier> a </identifier>
<identifier> new </identifier>
<identifier> Square </identifier>
<identifier> Game. </identifier>
<identifier> */ </identifier>
<keyword> constructor </keyword>
<identifier> SquareGame </identifier>
<identifier> new() </identifier>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> square </identifier>
<symbol> = </symbol>
<identifier> Square.new(0, </identifier>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<keyword> return </keyword>
<identifier> this; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Deallocates </identifier>
<identifier> the </identifier>
<identifier> object's </identifier>
<identifier> memory. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose() </identifier>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.dispose(); </identifier>
<keyword> do </keyword>
<identifier> Memory.deAlloc(this); </identifier>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Starts </identifier>
<identifier> the </identifier>
<identifier> game. </identifier>
<identifier> Handles </identifier>
<identifier> inputs </identifier>
<identifier> from </identifier>
<identifier> the </identifier>
<identifier> user </identifier>
<identifier> that </identifier>
<identifier> control </identifier>
<symbol> * </symbol>
<identifier> the </identifier>
<identifier> square's </identifier>
<identifier> movement, </identifier>
<identifier> direction </identifier>
<identifier> and </identifier>
<identifier> size. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run() </identifier>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key; </identifier>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> exit; </identifier>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<identifier> false; </identifier>
<keyword> while </keyword>
<identifier> (~exit) </identifier>
<symbol> { </symbol>
<keyword> while </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard.keyPressed(); </identifier>
<keyword> do </keyword>
<identifier> moveSquare(); </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<identifier> true; </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.decSize(); </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.incSize(); </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<identifier> (~(key </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard.keyPressed(); </identifier>
<keyword> do </keyword>
<identifier> moveSquare(); </identifier>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> return; </identifier>
<symbol> } </symbol>
<identifier> /** </identifier>
<identifier> Moves </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> by </identifier>
<integerConstant> 2 </integerConstant>
<identifier> pixels </identifier>
<identifier> in </identifier>
<identifier> the </identifier>
<identifier> current </identifier>
<identifier> direction. </identifier>
<identifier> */ </identifier>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveSquare() </identifier>
<symbol> { </symbol>
<keyword> if </keyword>
<identifier> (direction </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.moveUp(); </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (direction </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.moveDown(); </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (direction </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.moveLeft(); </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<identifier> (direction </identifier>
<symbol> = </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square.moveRight(); </identifier>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys.wait(5); </identifier>
<identifier> return; </identifier>
<symbol> } </symbol>
<symbol> } </symbol>
