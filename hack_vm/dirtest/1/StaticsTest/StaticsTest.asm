@256
D=A
@SP
M=D
//call
@return-address0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
//goto
@Sys.init
0;JMP
(return-address0)

//function
(Class1.set)

//push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@SP
M=M-1
@SP
A=M
D=M
@Class1.vm.0
M=D

//push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@SP
M=M-1
@SP
A=M
D=M
@Class1.vm.1
M=D

//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1

//return
@LCL
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M
A=A-1
D=M
@THAT
M=D
@2
D=A
@13
A=M
A=A-D
D=M
@THIS
M=D
@3
D=A
@13
A=M
A=A-D
D=M
@ARG
M=D
@4
D=A
@13
A=M
A=A-D
D=M
@LCL
M=D
@14
A=M
0;JMP

//function
(Class1.get)

//push static 0
@Class1.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1

//push static 1
@Class1.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1

//计算sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
//计算sub结束

//return
@LCL
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M
A=A-1
D=M
@THAT
M=D
@2
D=A
@13
A=M
A=A-D
D=M
@THIS
M=D
@3
D=A
@13
A=M
A=A-D
D=M
@ARG
M=D
@4
D=A
@13
A=M
A=A-D
D=M
@LCL
M=D
@14
A=M
0;JMP

//function
(Class2.set)

//push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@SP
M=M-1
@SP
A=M
D=M
@Class2.vm.0
M=D

//push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@SP
M=M-1
@SP
A=M
D=M
@Class2.vm.1
M=D

//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1

//return
@LCL
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M
A=A-1
D=M
@THAT
M=D
@2
D=A
@13
A=M
A=A-D
D=M
@THIS
M=D
@3
D=A
@13
A=M
A=A-D
D=M
@ARG
M=D
@4
D=A
@13
A=M
A=A-D
D=M
@LCL
M=D
@14
A=M
0;JMP

//function
(Class2.get)

//push static 0
@Class2.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1

//push static 1
@Class2.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1

//计算sub
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
//计算sub结束

//return
@LCL
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M
A=A-1
D=M
@THAT
M=D
@2
D=A
@13
A=M
A=A-D
D=M
@THIS
M=D
@3
D=A
@13
A=M
A=A-D
D=M
@ARG
M=D
@4
D=A
@13
A=M
A=A-D
D=M
@LCL
M=D
@14
A=M
0;JMP

//function
(Sys.init)

//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1

//push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1

//call
@return-address1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
//goto
@Class1.set
0;JMP
(return-address1)

//pop temp 0
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
//push constant 23
@23
D=A
@SP
A=M
M=D
@SP
M=M+1

//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1

//call
@return-address2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
//goto
@Class2.set
0;JMP
(return-address2)

//pop temp 0
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
//call
@return-address3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
//goto
@Class1.get
0;JMP
(return-address3)

//call
@return-address4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
//goto
@Class2.get
0;JMP
(return-address4)

//label
(Sys.init$WHILE)

//goto
@Sys.init$WHILE
0;JMP
